#lang scheme
(require "lib/basic.rkt")
;2.3.2 & ex-2.3.2

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (sum? e)
  (and (pair? e) (eq? (car e) '+)))
;(define (addend e) (caddr e))
;(define (augend e) (cadr e))
;(define (make-sum a1 a2)
;  (cond ((=number? a1 0) a2)
;        ((=number? a2 0) a1)
;        ((and (number? a1) (number? a2)) (+ a1 a2))
;        (else (list '+ a1 a2))))

(define (product? e)
  (and (pair? e) (eq? (car e) '*)))
;(define (multiplier e) (caddr e))
;(define (multiplicand e) (cadr e))
;(define (make-product m1 m2)
;  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
;        ((=number? m1 1) m2)
;        ((=number? m2 1) m1)
;        ((and (number? m1) (number? m2)) (* m1 m2))
;        (else (list '* m1 m2))))

#|(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (augend exp) var)
                   (deriv (addend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)
                                 (deriv (multiplicand exp) var))
                   (make-product (deriv (multiplier exp) var)
                                 (multiplicand exp))))
        (else
         (error "unkown expression type -- DERIV" exp))))|#

;ex-2.56
(define (exponentiation? e)
  (and (pair? e) (eq? (car e) '^)))
(define (base e) (cadr e))
(define (exponent e) (caddr e))
(define (make-exponentiation base exponent)
  (cond ((and (number? base) (number? exponent)) (power base exponent))
        ((=number? base 1) 1)
        ((=number? exponent 0) 1)
        ((=number? exponent 1) base)
        (else (list '^ base exponent))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (augend exp) var)
                   (deriv (addend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)
                                 (deriv (multiplicand exp) var))
                   (make-product (deriv (multiplier exp) var)
                                 (multiplicand exp))))
        ((exponentiation? exp)
         (make-product (exponent exp)
                       (make-product (make-exponentiation (base exp) (make-sum (exponent exp) '-1))
                                     (deriv (base exp) var))))
        (else
         (error "unkown expression type -- DERIV" exp))))

;ex-57
(define (augend e) (cadr e))
(define (addend e)
  (let ((rest (cddr e)))
    (if (= (length rest) 1)
        (car rest)
        (cons '+ rest))))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        ((and (pair? a2) (sum? a2)) (cons '+ (cons a1 (cdr a2))))
        (else (list '+ a1 a2))))

(define (multiplicand e) (cadr e))
(define (multiplier e)
  (let ((rest (cddr e)))
    (if (= (length rest) 1)
        (car rest)
        (cons '* rest))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        ((and (pair? m2) (product? m2)) (cons '* (cons m1 (cdr m2))))
        (else (list '* m1 m2))))

;16/8/25